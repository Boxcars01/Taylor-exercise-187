//Author: Hunter Taylor
//Course: CPT187
//Purpose: Module 6
//Date: 12/4/19

package cpt187.hunter.module6.participation;

import java.util.Scanner;

public class MainClass 
{
	public static final String[] MENU_LABELS = {"Load Inventory", "Create Order", "Quit"};
	public static final String BORDER = "------------------------------------------------------------";
	public static final String INVALID= "INVALID";
	public static final String MENU_PROMPT = "Please enter your selection:";
	public static final String MASTER_FILE_NAME = "Sod_Order_Master_File.txt";
	
	public static void main(String[] args) 
	{
		Scanner input = new Scanner(System.in);

		String userName = "";
		char menuSelection = ' ';

		SodOrder mySodOrder = new SodOrder();

		Inventory currentInventory = new Inventory();

		WriteOrder sodOrders = new WriteOrder(MASTER_FILE_NAME);

		displayWelcomeBanner();

		userName = getUserName(input);

		menuSelection = validateMainMenu(input);

		while (menuSelection != 'Q')	
		{

			if (menuSelection == 'A')
			{

				currentInventory.setLoadItems(getFileName(input));
				if (currentInventory.getRecordCount() <= 0)
				{
					displayNotOpen();
				}
				else
				{
					mySodOrder.setItemCountArray(currentInventory.getRecordCount());
				}
			}


			else
			{

				currentInventory.setSearchIndex(validateSearchValue(input));


				if (currentInventory.getSearchIndex()< 0)
				{
					displayNotFound();
				}
				else
				{

					mySodOrder.setItemSelection(currentInventory.getSearchIndex());

					mySodOrder.setItemID(currentInventory.getItemIDs());

					mySodOrder.setItemName(currentInventory.getItemNames());

					mySodOrder.setItemPrice(currentInventory.getItemPrices());

					mySodOrder.setHowMany(validateHowMany(input));


					if (mySodOrder.getInstockCount(currentInventory.getInStockCounts()) < mySodOrder.getHowMany())
					{
						displayOutOfStock();
					}
					else
					{

						mySodOrder.setDiscountType(validateDiscountMenu(input, currentInventory.getDiscountNames(), currentInventory.getDiscountRates()));

						mySodOrder.setDiscountName(currentInventory.getDiscountNames());

						mySodOrder.setDiscountRate(currentInventory.getDiscountRates());

						mySodOrder.setDecreaseInStock(currentInventory);

						mySodOrder.setPrizeName(currentInventory.getPrizeNames(), currentInventory.getRandomNumber());

						sodOrders.setWriteOrder(mySodOrder.getItemID(), mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getHowMany(), mySodOrder.getTotalCost());

						if (mySodOrder.getDiscountRate() > 0.0)
						{

							displayItemReceipt(mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getHowMany(), mySodOrder.getDiscountName(),
									mySodOrder.getDiscountRate(), mySodOrder.getDiscountAmt(), mySodOrder.getDiscountPrice(), mySodOrder.getSubTotal(),
									mySodOrder.getTaxRate(), mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(), mySodOrder.getPrizeName());
						}
						else
						{

							displayItemReceipt(mySodOrder.getItemName(), mySodOrder.getItemPrice(), mySodOrder.getHowMany(), mySodOrder.getSubTotal(), 
									mySodOrder.getTaxRate(), mySodOrder.getTaxAmt(), mySodOrder.getTotalCost(), mySodOrder.getPrizeName());

						}

					}

				}

			}

			menuSelection = validateMainMenu(input);

		}
		

		if (mySodOrder.getTotalCost() > 0.0)
		{
			currentInventory.setLoadItems(sodOrders.getFileName(), sodOrders.getRecordCount());
			displayFinalReport(userName, currentInventory.getItemIDs(), currentInventory.getItemNames(),sodOrders.getRecordCount(), currentInventory.getDiscountNames(),
					mySodOrder.getDiscountCounts(), currentInventory.getPrizeNames(), mySodOrder.getPrizeCounts(), currentInventory.getInStockCounts());
		}


		displayFarewellMessage();

		input.close();

	}

	public static void displayWelcomeBanner()
	{

		System.out.printf("%s\n","Welcome to the IMPROVED Sod not Zod program!");
		System.out.println("This program is designed to help you");
		System.out.println("manage and track sod purchases.");
		System.out.println(BORDER);
	}

	public static String getUserName(Scanner borrowedInput)
	{
		String localUserName = "";
		System.out.print("Please enter your username:");
		localUserName = borrowedInput.next();
		return localUserName;
	}

	public static char validateMainMenu(Scanner borrowedInput)
	{
		char localMenuSelection = ' ';

		displayMainMenu();
		localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);

		while (localMenuSelection != 'A' && localMenuSelection != 'B' && localMenuSelection != 'Q')
		{
			System.out.println(INVALID);
			displayMainMenu();
			localMenuSelection = borrowedInput.next().toUpperCase().charAt(0);	
		}

		return localMenuSelection;
	}

	public static void displayMainMenu()
	{

		System.out.println(BORDER);
		System.out.println("MAIN MENU");
		System.out.println(BORDER);
		System.out.printf("%-8s%s\n", "[A]", MENU_LABELS[0]);
		System.out.printf("%-8s%s\n", "[B]", MENU_LABELS[1]);
		System.out.printf("%-8s%s\n", "[Q]", MENU_LABELS[2]);
		System.out.print(MENU_PROMPT);

	}

	public static String getFileName(Scanner borrowedInput)
	{

		String localFileName = "";


		System.out.println("Load Inventory");
		System.out.println(BORDER);
		System.out.print("Please enter file name containing inventory: ");
		localFileName = borrowedInput.next();

		return localFileName;
	}

	public static int validateSearchValue(Scanner borrowedInput)
	{

		int localItemID = 0;


		System.out.print("Please input Item ID:");
		localItemID = borrowedInput.nextInt();

		while (localItemID < 0) {

			System.out.println(INVALID);
			System.out.println(BORDER);
			System.out.print("Please enter Item ID:");
			localItemID = borrowedInput.nextInt();

		}

		return localItemID;
	}

	public static int validateHowMany(Scanner borrowedInput)
	{
		
		int localHowMany = 0;

		System.out.print("Input quantity of items purchasing:");
		localHowMany = borrowedInput.nextInt();

		while (localHowMany <= 0)
		{
			System.out.println(INVALID);
			System.out.print("Input quantity of items purchasing:");
			localHowMany = borrowedInput.nextInt();
		}

		return localHowMany;
	}

	public static void displayNotOpen()
	{
		System.out.println("File not found");
		System.out.println("Please try again.");
		System.out.println(BORDER);
	}

	public static void displayNotFound()
	{
		System.out.println("Item not found");
		System.out.println("Please try again");
		System.out.println(BORDER);
	}

	public static void displayOutOfStock()
	{

		System.out.println("This item is currently out of or low on stock.");
		System.out.println(BORDER);
	}

	public static char validateDiscountMenu(Scanner borrowedInput, String[] borrowedDiscountNames, double[] borrowedDiscountRates)
	{

		char localDiscountSelection = ' ';

		displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);

		localDiscountSelection = borrowedInput.next().toUpperCase().charAt(0);

		while (localDiscountSelection != 'A' && localDiscountSelection != 'B' && localDiscountSelection != 'C')
		{
			System.out.println(INVALID);
			displayDiscountMenu(borrowedDiscountNames, borrowedDiscountRates);
			localDiscountSelection = borrowedInput.next().toUpperCase().charAt(0);	
		}

		return localDiscountSelection;
	}

	public static void displayDiscountMenu(String[] borrowedDiscountName, double[] borrowedDiscountRate)
	{

		System.out.println("");
		System.out.println(BORDER);
		System.out.println("Discount Menu");
		System.out.println(BORDER);
		System.out.printf("%-8s%-15s%.1f%2s\n","[A]",borrowedDiscountName[0],borrowedDiscountRate[0]*100,"%");
		System.out.printf("%-8s%-15s%.1f%2s\n","[B]",borrowedDiscountName[1],borrowedDiscountRate[1]*100,"%");
		System.out.printf("%-8s%-16s%.1f%2s\n","[C]",borrowedDiscountName[2],borrowedDiscountRate[2]*100,"%");
		System.out.println("Please Enter Your Selection Here:");
	}//End of discount menu

	//Display receipt
	public static void displayItemReceipt(String borrowedItemName, double borrowedItemPrice, int borrowedHowMany,String BorrowedDiscountName,
			double borrowedDiscountRate, double borrowedDiscountAmt, double borrowedDiscountPrice, double borrowedSubTotal, double borrowedTaxRate, 
			double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName)
	{
		System.out.println("");
		System.out.println(BORDER);
		System.out.println("Item Reciept");
		System.out.println(BORDER);
		System.out.printf("%-18s%8s\n","You Purchased:",borrowedItemName);
		System.out.printf("%-18s%9d\n","Quantity:",borrowedHowMany);
		System.out.printf("%-18s%1s%8.2f\n","Original Price:","$", borrowedItemPrice);
		System.out.printf("%-18s%1s%8.2f\n","Discount Off:","$", borrowedDiscountAmt);
		System.out.printf("%-18s%1s%8.2f\n","Discount Price:","$", borrowedDiscountPrice);
		System.out.println(BORDER);
		System.out.printf("%-18s%8.1f%2s\n","Discount:", borrowedDiscountRate ,"%");
		System.out.printf("%-18s%8.1f%2s\n","Tax Rate:", borrowedTaxRate,"%");
		System.out.printf("%-18s%1s%8.2f\n","Tax:","$", borrowedTaxAmt);
		System.out.printf("%-18s%1s%8.2f\n","Sub-Total:","$", borrowedSubTotal);
		System.out.printf("%-18s%1s%8.2f\n","Total:","$", borrowedTotalCost);
		System.out.printf("\n%-18s%1s%8s\n","Randomly Generated Prize:", "", borrowedPrizeName);
		System.out.println(BORDER);	
	}

	public static void displayItemReceipt(String borrowedItemName, double borrowedItemPrice, int borrowedHowMany, double borrowedSubTotal, 
			double borrowedTaxRate,	double borrowedTaxAmt, double borrowedTotalCost, String borrowedPrizeName)
	{
		System.out.println(BORDER);
		System.out.println("Item Receipt");
		System.out.println(BORDER);
		System.out.printf("%-18s%1s%8s\n","You Purchased:", "", borrowedItemName);
		System.out.printf("%-18s%1s%8d\n","Quantity:", "", borrowedHowMany);
		System.out.printf("%-18s%1s%8.2f\n","Original Price:","$", borrowedItemPrice);
		System.out.printf("%-18s%8.1f%2s\n","Tax Rate:",borrowedTaxRate,"%");
		System.out.printf("%-18s%1s%8.2f\n","Tax: ","$", borrowedTaxAmt);
		System.out.printf("%-18s%1s%8.2f\n","Subtotal:","$", borrowedSubTotal);
		System.out.printf("%-18s%1s%8.2f\n","Total:","$", borrowedTotalCost);
		System.out.printf("%-18s%1s%8s\n","Randomly Generated Prize:", "", borrowedPrizeName);
		System.out.println(BORDER);	
	}

	public static void displayFinalReport(String borrowedUserName,int[] borrowedItemID, String[] borrowedItemName, int borrowedRecordCount, String[] borrowedDiscountName,
			int[] borrowedDiscountCount, String[] borrowedPrizeName,  int[] borrowedPrizeCount, int[] borrowedInStockCount)
	{
		int localIndex = 0;

		System.out.println("FINAL REPORT");
		System.out.println(BORDER);
		System.out.printf("%-31s\n","Items Selected");
		System.out.println(BORDER);

		while (localIndex < borrowedItemName.length)
		{
			if(borrowedItemName[localIndex] != null)
			{
				System.out.printf("%-5d%-20s\n", borrowedItemID[localIndex], borrowedItemName[localIndex]);
			}
			localIndex++;	
		}
		System.out.println(BORDER);
		System.out.printf("%-31s%1s%8s\n", "Employee Name:", "", borrowedUserName);
		System.out.println(BORDER);
		System.out.println("Discount Counter");
		System.out.println(BORDER);
		System.out.printf("%-31s%1s%8s\n", borrowedDiscountName[0] + " Count:", "", borrowedDiscountCount[0]);
		System.out.printf("%-31s%1s%8s\n", borrowedDiscountName[1] + " Count:", "", borrowedDiscountCount[1]);
		System.out.printf("%-31s%1s%8s\n", borrowedDiscountName[2] + " Count:", "", borrowedDiscountCount[2]);
		System.out.println(BORDER);
		System.out.println("Prize Counter");
		System.out.println(BORDER);
		System.out.printf("%-31s%1s%8s\n", borrowedPrizeName[0] + " Count:", "", borrowedPrizeCount[0]);
		System.out.printf("%-31s%1s%8s\n", borrowedPrizeName[1] + " Count:", "", borrowedPrizeCount[1]);
		System.out.printf("%-31s%1s%8s\n", borrowedPrizeName[2] + " Count:", "", borrowedPrizeCount[2]);
	}

	public static void displayFarewellMessage()
	{
		System.out.println("Thank you for using the program, have a nice day!!");
	}
}
